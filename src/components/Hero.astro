---
import { Copy, Github, ChevronDown, Rocket, Flame } from '@lucide/astro';
import PerformanceBadge from "./PerformanceBadge.astro"

---
<section class="min-h-screen py-28 px-4">
  <div class="container mx-auto text-center max-w-4xl mt-10">

    <PerformanceBadge/>


    <h1 class="text-5xl font-bold my-6 leading-tight">
      Private Search 
      <span class="text-gray-500">Multiplexer</span>
    </h1>

    <p class="text-lg md:text-xl text-gray-600 mb-8 max-w-2xl mx-auto leading-relaxed">
      Supercharge your browser with zero friction.
    </p>

    <div
      id="curlCommandBlock"
      class="hidden md:block group bg-gray-100 rounded-lg p-4 max-w-lg mx-auto font-mono text-sm transition-all
             hover:shadow-sm active:shadow-md cursor-pointer relative overflow-x-auto whitespace-nowrap active:-translate-y-1"
    >
      curl -fsSL https://michi.run/install.sh | sh
      <span
        id="copyFeedback"
        class="absolute bottom-1/2 translate-y-1/2 right-2 text-xs text-green-600 opacity-0 transition-opacity duration-300"
      />
      <Copy
        stroke-width={1}
        class="group-hover:opacity-60 group-active:opacity-100 absolute bottom-1/2 translate-y-1/2 left-4 opacity-30 transition-opacity"
      />
    </div>

    <div class="md:hidden flex justify-center mt-6">
      <a
        href="#features"
        class="flex items-center gap-2 px-5 py-3 border border-gray-300 rounded-lg text-sm font-medium bg-gray-900 text-white hover:bg-gray-700 transition"
      >
        <Rocket size={18} />
        Explore Features
      </a>
    </div>

    <a
      href="#about"
      class="flex animate-bounce justify-center items-center mt-40 text-gray-700 hover:text-gray-900 transition"
    >
      <ChevronDown stroke-width={1} size={50} />
    </a>

  </div>
</section>

<script is:inline>
  const curlCommandBlock = document.getElementById('curlCommandBlock');
  const copyFeedback = document.getElementById('copyFeedback');
  const commandToCopy = "curl -fsSL https://michi.run/install.sh | sh";

  if (curlCommandBlock) {
    curlCommandBlock.addEventListener('click', async () => {
      let success = false;
      try {
        if (navigator.clipboard && navigator.clipboard.writeText) {
          await navigator.clipboard.writeText(commandToCopy);
          success = true;
        }       
      } catch (err) {
        console.error('Failed to copy text:', err);
        success = false;
      }

      if (copyFeedback) {
        if (success) {
          copyFeedback.textContent = 'Copied!';
          copyFeedback.classList.remove('text-red-600');
          copyFeedback.classList.add('text-green-600');
        } else {
          copyFeedback.textContent = 'Failed to copy!';
          copyFeedback.classList.remove('text-green-600');
          copyFeedback.classList.add('text-red-600');
        }
        copyFeedback.classList.add('opacity-100'); 

        setTimeout(() => {
          copyFeedback.classList.remove('opacity-100'); 
          setTimeout(() => { copyFeedback.textContent = ''; }, 300);
        }, 2000);
      }
    });
  }
</script>
